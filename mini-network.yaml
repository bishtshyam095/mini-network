# VPC - VPCBlock
# Subnets
# Instance
# Networking

AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  VpcCidr:
    Type: String
    Default: '10.0.0.0/16'
    Description: 'CIDR block for the VPC'

  PublicSubnetCidr:
    Type: String
    Default: '10.0.1.0/24'
    Description: 'CIDR block for the public subnet'

  PrivateSubnetCidr:
    Type: String
    Default: '10.0.2.0/24'
    Description: 'CIDR block for the private subnet'

Resources:
  L00179095VPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      Tags:
        - Key: Name
          Value: 'L00179095VPC'

  PublicSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref L00179095VPC
      CidrBlock: !Ref PublicSubnetCidr
      AvailabilityZone: 'us-east-1a'
      MapPublicIpOnLaunch: 'true'
      Tags:
        - Key: Name
          Value: 'PublicSubnet'

  PrivateSubnet:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref L00179095VPC
      CidrBlock: !Ref PrivateSubnetCidr
      AvailabilityZone: 'us-east-1b'
      Tags:
        - Key: Name
          Value: 'PrivateSubnet'
  
  FrontendSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Security group for the frontend instance'
      VpcId: !Ref L00179095VPC
  
  FrontendInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: 't2.micro'
      ImageId: 'ami-0230bd60aa48260c6'  # Replace with your AMI ID
      SubnetId: !Ref PublicSubnet
      SecurityGroupIds: [!Ref FrontendSecurityGroup]
      Tags:
        - Key: Name
          Value: 'FrontendInstance'

  BackendSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Security group for the backend instance'
      VpcId: !Ref L00179095VPC

  BackendInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: 't2.micro'
      ImageId: 'ami-0230bd60aa48260c6'  # Replace with your AMI ID
      SubnetId: !Ref PrivateSubnet
      SecurityGroupIds: [!Ref BackendSecurityGroup]
      Tags:
        - Key: Name
          Value: 'BackendInstance'  

  DatabaseSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Security group for the database instance'
      VpcId: !Ref L00179095VPC

  DatabaseInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: 't2.micro'
      ImageId: 'ami-0230bd60aa48260c6'  # Replace with your AMI ID
      SubnetId: !Ref PrivateSubnet
      SecurityGroupIds: [!Ref DatabaseSecurityGroup]
      Tags:
        - Key: Name
          Value: 'DatabaseInstance' 

  DummyInstance:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: 't2.micro'
      ImageId: 'ami-0230bd60aa48260c6'  # Replace with your AMI ID
      SubnetId: !Ref PublicSubnet
      Tags:
        - Key: Name
          Value: 'DummyInstance'

  JumpBoxSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Security group for the Bastion host'
      VpcId: !Ref L00179095VPC

  JumpBox:
    Type: 'AWS::EC2::Instance'
    Properties:
      InstanceType: 't2.micro'
      ImageId: 'ami-0230bd60aa48260c6'  # Replace with your AMI ID
      SubnetId: !Ref PublicSubnet
      SecurityGroupIds: [!Ref JumpBoxSecurityGroup]
      Tags:
        - Key: Name
          Value: 'JumpBox'   
  
  # Internet gateway ---

  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: 'InternetGateway'

  AttachGateway:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      VpcId: !Ref L00179095VPC
      InternetGatewayId: !Ref InternetGateway

  # add route table & NAT gateway

  RouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref L00179095VPC
      Tags:
        - Key: Name
          Value: 'PublicRouteTable'

  PublicRoute:
    Type: 'AWS::EC2::Route'
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      GatewayId: !Ref InternetGateway

  PublicSubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref RouteTable

  NatGatewayEIP:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: 'vpc'

  NatGateway:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet

  PrivateRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref L00179095VPC
      Tags:
        - Key: Name
          Value: 'PrivateRouteTable'

  PrivateRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: '0.0.0.0/0'
      NatGatewayId: !Ref NatGateway

  PrivateSubnetRouteTableAssociation:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref PrivateRouteTable